/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package partylist;

import java.io.File;
import java.util.ArrayList;
import java.util.logging.*;

/**
 *
 * @author Connor
 */
public class MusicWindow extends javax.swing.JFrame {

    private Playlist playlist;
    private Thread audioThread;
    private final ArrayList<ArrayList<File>> music;
    
    /**
     * Creates new form MusicWindow
     */
    public MusicWindow() {
        initComponents();
        music = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooser = new javax.swing.JFileChooser();
        txtAddUser = new javax.swing.JTextField();
        btnAddUser = new javax.swing.JButton();
        cmbUser = new javax.swing.JComboBox();
        btnRemoveUser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstMusic = new javax.swing.JList();
        btnPlay = new javax.swing.JButton();
        btnRemoveSong = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        btnTop = new javax.swing.JButton();
        btnBottom = new javax.swing.JButton();
        btnSkipUser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chooser.setMultiSelectionEnabled(true);
        chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooserActionPerformed(evt);
            }
        });

        txtAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddUserActionPerformed(evt);
            }
        });

        btnAddUser.setText("Add User");
        btnAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddUserActionPerformed(evt);
            }
        });

        cmbUser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbUserItemStateChanged(evt);
            }
        });
        cmbUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUserActionPerformed(evt);
            }
        });

        btnRemoveUser.setText("Remover User");
        btnRemoveUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveUserActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lstMusic);

        btnPlay.setText("►");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnRemoveSong.setText("Remove Song");
        btnRemoveSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveSongActionPerformed(evt);
            }
        });

        btnUp.setText("▲");
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnStop.setText("■");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnDown.setText("▼");
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });

        btnTop.setText("▲▲");
        btnTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTopActionPerformed(evt);
            }
        });

        btnBottom.setText("▼▼");
        btnBottom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBottomActionPerformed(evt);
            }
        });

        btnSkipUser.setText("Skip User");
        btnSkipUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSkipUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtAddUser)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAddUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemoveUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBottom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDown))
                            .addComponent(btnSkipUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnPlay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnTop))
                            .addComponent(btnRemoveSong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddUser))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemoveUser))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnTop)
                            .addComponent(btnUp)
                            .addComponent(btnBottom)
                            .addComponent(btnDown)
                            .addComponent(btnPlay))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnStop)
                            .addComponent(btnRemoveSong)
                            .addComponent(btnSkipUser))))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooserActionPerformed
        if(cmbUser.getItemCount() == 0)
            return;
        File[] selections = chooser.getSelectedFiles();
        for (File selection : selections) {
            getUser().add(selection);
        }
        updateList();
    }//GEN-LAST:event_chooserActionPerformed

    private void updateList(){
        if(cmbUser.getItemCount() == 0)
            lstMusic.setListData(new File[0]);
        else{
            String selections[] = new String[getUser().size()];
            for(int i = 0; i < selections.length; i++){
                String s = getUser().get(i).toString();
                selections[i] = s.substring(s.lastIndexOf("\\")+1);
            }
            lstMusic.setListData(selections);
        }
    }
    
    private ArrayList<File> getUser(){
        return music.get(cmbUser.getSelectedIndex());
    }
    
    public void getSong(String name, File file, String uName){
        int user = -1;
        for(int i = 0; i < cmbUser.getItemCount(); i++)
            if(uName.equals(cmbUser.getItemAt(i)))
                user = i;
        if(user == -1){
            music.add(new ArrayList<>());
            cmbUser.addItem(uName);
            user = music.size()-1;
        }
        music.get(user).add(file);
        updateList();
    }
    
    private boolean liveThread(){
        if(audioThread == null) return false;
        return audioThread.isAlive();
    }
    
    private void txtAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddUserActionPerformed

    private void btnAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUserActionPerformed
        music.add(new ArrayList<>());
        cmbUser.addItem(txtAddUser.getText());
    }//GEN-LAST:event_btnAddUserActionPerformed

    private void btnRemoveUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveUserActionPerformed
        if(music.size() < 2) return;
        cmbUser.removeItem(cmbUser.getSelectedItem());
        music.remove(cmbUser.getSelectedIndex());
    }//GEN-LAST:event_btnRemoveUserActionPerformed

    private void cmbUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUserActionPerformed
        
    }//GEN-LAST:event_cmbUserActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        try {
            if(lstMusic.getSelectedIndex() < 0) return;
            if(liveThread()){
                playlist.end = true;
                playlist.close();
                audioThread.interrupt();
            }
            File toPlay = getUser().get(lstMusic.getSelectedIndex());
            getUser().remove(toPlay);
            getUser().add(0, toPlay);
            updateList();
            playlist = new Playlist(music, cmbUser.getSelectedIndex());
            audioThread = new Thread(playlist);
            audioThread.start();
        } catch (Exception ex) {
            Logger.getLogger(MusicWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTopActionPerformed
        if(lstMusic.getSelectedIndex() < 1) return;
        File move = getUser().get(lstMusic.getSelectedIndex());
        getUser().remove(move);
        getUser().add(0, move);
        if(liveThread() && playlist.getUser() == cmbUser.getSelectedIndex()){
            playlist.end = true;
            playlist.close();
            audioThread.interrupt();
            playlist = new Playlist(music, cmbUser.getSelectedIndex());
            audioThread = new Thread(playlist);
            audioThread.start();
        }
        updateList();
    }//GEN-LAST:event_btnTopActionPerformed

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        boolean playing = false;
        if(liveThread() && playlist.getUser() == cmbUser.getSelectedIndex() && lstMusic.getSelectedIndex() == 1)
            playing = true;
        if(lstMusic.getSelectedIndex() < 1) return;
        File move = getUser().get(lstMusic.getSelectedIndex());
        int pos = lstMusic.getSelectedIndex()-1;
        getUser().remove(move);
        getUser().add(pos, move);
        if(playing){
            playlist.end = true;
            playlist.close();
            audioThread.interrupt();
            playlist = new Playlist(music, cmbUser.getSelectedIndex());
            audioThread = new Thread(playlist);
            audioThread.start();
        }
        updateList();
    }//GEN-LAST:event_btnUpActionPerformed

    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        boolean playing = false;
        if(lstMusic.getSelectedIndex() < 0 || lstMusic.getSelectedIndex() == getUser().size()-1) return;
        if(liveThread() && playlist.getUser() == cmbUser.getSelectedIndex() && lstMusic.getSelectedIndex() == 0)
            playing = true;
        File move = getUser().get(lstMusic.getSelectedIndex());
        int pos = lstMusic.getSelectedIndex()+1;
        getUser().remove(move);
        getUser().add(pos, move);
        if(playing){
            playlist.end = true;
            playlist.close();
            audioThread.interrupt();
            playlist = new Playlist(music, cmbUser.getSelectedIndex());
            audioThread = new Thread(playlist);
            audioThread.start();
        }
        updateList();
    }//GEN-LAST:event_btnDownActionPerformed

    private void btnBottomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBottomActionPerformed
        if(lstMusic.getSelectedIndex() < 0 || lstMusic.getSelectedIndex() == getUser().size()-1) return;
        boolean playing = false;
        if(liveThread() && playlist.getUser() == cmbUser.getSelectedIndex() && lstMusic.getSelectedIndex() == 0)
            playing = true;
        File move = getUser().get(lstMusic.getSelectedIndex());
        getUser().remove(move);
        getUser().add(move);
        if(playing){
            playlist.end = true;
            playlist.close();
            audioThread.interrupt();
            playlist = new Playlist(music, cmbUser.getSelectedIndex());
            audioThread = new Thread(playlist);
            audioThread.start();
        }
        updateList();
    }//GEN-LAST:event_btnBottomActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        if(liveThread()){
            playlist.end = true;
            playlist.close();
            audioThread.interrupt();
            audioThread = null;
            playlist = null;
        }
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnRemoveSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveSongActionPerformed
        boolean playing = false;
        if(liveThread() && playlist.getUser() == cmbUser.getSelectedIndex() && lstMusic.getSelectedIndex() == 0)
            playing = true;
        getUser().remove(lstMusic.getSelectedIndex());
        if(playing){
            playlist.end = true;
            playlist.close();
            audioThread.interrupt();
            playlist = new Playlist(music, cmbUser.getSelectedIndex());
            audioThread = new Thread(playlist);
            audioThread.start();
        }
        updateList();
    }//GEN-LAST:event_btnRemoveSongActionPerformed

    private void btnSkipUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSkipUserActionPerformed
        if(!liveThread()) return;
        int user = (playlist.getUser()+1)%music.size();
        playlist.end = true;
        playlist.close();
        audioThread.interrupt();
        playlist = new Playlist(music, user);
        audioThread = new Thread(playlist);
        audioThread.start();
    }//GEN-LAST:event_btnSkipUserActionPerformed

    private void cmbUserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbUserItemStateChanged
        updateList();
    }//GEN-LAST:event_cmbUserItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusicWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusicWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusicWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusicWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusicWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddUser;
    private javax.swing.JButton btnBottom;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnRemoveSong;
    private javax.swing.JButton btnRemoveUser;
    private javax.swing.JButton btnSkipUser;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnTop;
    private javax.swing.JButton btnUp;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstMusic;
    private javax.swing.JTextField txtAddUser;
    // End of variables declaration//GEN-END:variables
}
